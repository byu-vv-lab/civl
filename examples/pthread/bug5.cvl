/*****************************************************************************
* SOURCE: This is a translation of a Pthread program from the Lawrence Livermore
* Computing Center POSIX Threads Programming Exercise at:
* https://computing.llnl.gov/tutorials/pthreads/exercise.html
* FILE: bug5.cvl
* DESCRIPTION:
*   A simple pthreads program that dies before the threads can do their
*   work. Figure out why.
* Command line execution:
* civl verify -inputNUM_THREADS=5 bug5.cvl
******************************************************************************/
#include "pthread.cvh"
#include <civlc.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

$input int NUM_THREADS;

void *PrintHello(void *threadid)
{
   int i;
   double myresult=0.0;
   printf("thread=%d: starting...\n", threadid); // Removed l from %ld
   for (i=0; i<1000000; i++)
      myresult += sin(i) * tan(i);
   printf("thread=%d result=%e. Done.\n",threadid,myresult); // Removed l from %ld
   pthread_exit(NULL);
}

int main(int argc, char *argv[])
{
pthread_t threads[NUM_THREADS];
int rc;
long t;
for(t=0;t<NUM_THREADS;t++){
  printf("Main: creating thread %ld\n", t);
  rc = pthread_create(&threads[t], NULL, PrintHello, (void *)t);
  if (rc){
    printf("ERROR; return code from pthread_create() is %d\n", rc);
    exit(-1);
    }
  }
printf("Main: Done.\n");
}

